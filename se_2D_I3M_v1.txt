J 10 										// A[0] J to address 10 x 8 bytes A[B]
LOOP_CTR = 0x1								// A[1] LOOP COUNTER (NO repetitions for now)
CMD1 = TX_GATE | RX_PULSE             		// A[2] UNUSED
CMD2 = 0x0                          		// A[3] UNUSED
CMD3 = 0x2                          				// A[4] all off (note that RX_PULSE use inverted logic)
CMD4 = 0X0                          				// A[5] only receiver on (all off, but do not reset RX FIFO)
CMD5 = TX_GATE | TX_PULSE | RX_PULSE    			// A[6] RF
CMD6 = TX_GATE | TX_PULSE           				// A[7] RF with receiver on
CMD7 = GRAD_PULSE | RX_PULSE           				// A[8] GRAD
CMD8 = GRAD_PULSE                   				// A[9] GRAD with receiver on
CMD9 = TX_GATE | TX_PULSE | RX_PULSE | GRAD_PULSE	// A[A] RF&GRAD
CMD10 = TX_GATE | TX_PULSE | GRAD_PULSE				// A[B] RF&GRAD with receiver on
NOP                                         // A[C] UNUSED
NOP                                         // A[D] UNUSED
NOP                                         // A[E] UNUSED
NOP                                         // A[F] UNUSED
LD64 2, LOOP_CTR    						// A[10] Load LOOP_CTR to R[2]		"J here"
LD64 3, CMD3        						// A[11] Load CMD3 to R[3]
LD64 4, CMD4        						// A[12] Load CMD4 to R[4]
LD64 5, CMD5        						// A[13] Load CMD5 to R[5]
LD64 6, CMD6        						// A[14] Load CMD6 to R[6]
LD64 7, CMD7        						// A[15] Load CMD7 to R[7]
LD64 8, CMD8        						// A[16] Load CMD8 to R[8]
LD64 9, CMD9        						// A[17] Load CMD9 to R[9]
LD64 10, CMD10      						// A[18] Load CMD10 to R[10]
LD64 11, CMD1                               // A[19] Load CMD1 to R[11]
NOP                                         // A[1A] UNUSED
NOP                                         // A[1B] UNUSED
NOP                                         // A[1C] UNUSED
TXOFFSET 0 							        // A[1D] TXOFFSET 0: RF 90x+				"JNZ here"
GRADOFFSET 0 						        // A[1E] GRADOFFSET Phase encoding in parallel to Frequency encoding rewind
PR 7, 10            // grad-Update offset   // A[1F]
PR 11, 20           // Unblank Tx           // A[20]
PR 5, 100	        // RF 90        	    // A[21]
PR 3, 600           // wait                 // A[22]
PR 7, 2200          // grad                 // A[23] Phase encoding in parallel to Frequency encoding rewind
PR 3, 80	        // wait				    // A[24]
PR 3, 1000          // wait                 // A[22] *** Adjust here and below to change TE. The TE will be 5 ms plus this value
TXOFFSET 1100 						        // A[25] TXOFFSET 0: RF 180x+
PR 11, 20           // Unblank Tx           // A[26]
PR 5, 100	        // RF 180			    // A[27]
GRADOFFSET 1500						        // A[28] GRADOFFSET Frequency encoding
PR 3, 2270    //consider as 3000 // wait    // A[29]  3000 - Echo time is 640+40+50(30 ramp + 10 delay of the first zero+50 RF/2) from the fe gradient ON instruction
//PR 3, 1040    //consider as 3000 // wait    // A[29]  3000 - Echo time is 1600+310+50(300 ramp + 10 delay of the first zero+50 RF/2) from the fe gradient ON instruction
PR 3, 1000          // wait                 // A[22] *** Adjust here to change TE. The TE will be 5 ms plus this value
PR 8, 4000          // grad&read            // A[2B]
TXOFFSET 2200		// @@@ TEST			        // A[2C] TXOFFSET 0: RF 180x+
//PR 8, 1860        // @@@ TEST grad&read          // A[2B]
//PR 10, 100        // @@@ TEST grad&read&pulse // A[2D] NOT to use on actual MRI!! Be careful, this sends a Tx while Rx is ON Echo ref
//PR 8, 2040        // @@@ TEST grad&read       // A[2E]
PR 4, 10000         // wait & read          // A[31] Data acquisition has a long delay
PR 3, 10000          // wait                 // A[30]
PR 4, 50000         // wait & read          // A[31] STOP: fill data buffer to trigger stop
DEC 2 				// reduce counter 2		// A[32] DEC R[2]
JNZ 2, 0x1D 		// If cntr 2 not 0	jump// A[33] JNZ R[2] => `PC=0x1D
HALT 								        // A[34] HALT